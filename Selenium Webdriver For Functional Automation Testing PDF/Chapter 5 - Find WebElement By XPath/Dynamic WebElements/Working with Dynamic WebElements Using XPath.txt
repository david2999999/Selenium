Working With Dynamic WebElements Using XPath
    - There are situations when a web application may contain dynamic WebElements
        - Dynamic WebElement is when the value on an application changes at runtime
        - Dynamic WebElement manifests when the value of an attribute changes upon reloading the
          web application.
    - The home page of yahoo is a perfect example of a dynamic WebElements
        - The list box WebElements change when the page reloads
        - A user has to search for information and select an option from the list of options
            - Each set of options contains a different value for ID attribute

    - An exception occurs if the locator attempts to find a dynamic element
        - The test script will not find the element because the value changed
        - Relative XPath can find dynamic WebElements utilizing a partial pattern match
            - The partial pattern match locates a WebElement based on part of the value
            - Syntax [PartialPatternMatch(@AttributeName,’AttributeValue’)]

    - Assuming the value for an ID attribute changes from “Test123” to “Test456”, “123Test” to
      “456Test”, and “123Test456” to “789Test123”
        - The automation engineer can manually write a partial pattern match to find the dynamic WebElement
            - The following are three partial pattern match types that assist with dynamic values
                - starts-with - finds a WebElement if the value starts with a constant string value “Test123” and “Test456”
                    - driver.findElement.(By.xpath("//[starts-with(@id,'Test')]”))
                - ends-with - finds a WebElement if the value ends with a constant string value “123Test” and “456Test”
                    - driver.findElement.(By.xpath("//[ends-with(@id,'Test')]”))
                - contains - finds a WebElement if the value contains a constant string value “123Test456” and “789Test123”
                    - driver.findElement.(By.xpath("//[contains(@id,'Test')]”))